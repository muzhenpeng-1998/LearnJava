<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
<!--
    
    在进行框架配置的时候，可以使用xml文件，也可以使用注解的方式
    很多同学觉得xml的方式比较麻烦，但是xml的配置方式还是要学习的，因为在项目开发过程中
    很多情况下是xml和注解一起工作，而且xml配置的方式比较完整
    


    根据属性值设置的时候，name的名称取决于set方法后面的参数首字符小写的名称
    <bean id="person" class="com.example.study.Spring.IOC.day3.bean.Person">
        <property name="id" value="1"></property>
        <property name="name" value="zhangsan"></property>
        <property name="age" value="20"></property>
        <property name="gender" value="男"></property>
        <property name="date" value="2020/02/08"></property>
    </bean>

    使用构造器方法赋值的时候，参数的name属性是由什么来决定的？由构造方法的参数名称决定的
    
    name:表示参数列表的名称
    value:表示实际的具体值
    type:表示值的类型
    index:表示值的下标，从0开始
    
    <bean id="person2" class="com.example.study.Spring.IOC.day3.bean.Person">
        <constructor-arg name="id" value="2"></constructor-arg>
        <constructor-arg name="name" value="lisi"></constructor-arg>
        <constructor-arg name="age" value="22"></constructor-arg>
        <constructor-arg name="gender" value="男"></constructor-arg>
    </bean>

    当通过构造器方法赋值的时候，可以把name属性省略不写，但是要注意必须要保证参数值跟构造器的参数列表的顺序一致
    如果非要不一致的话，可以通过index的下标方式来标注，从0开始
    
    <bean id="person3" class="com.example.study.Spring.IOC.day3.bean.Person">
        <constructor-arg  value="2"></constructor-arg>
        <constructor-arg  value="男" index="3"></constructor-arg>
        <constructor-arg  value="22"></constructor-arg>
        <constructor-arg  value="lisi" index="1"></constructor-arg>
    </bean>

    
    当有多个相同参数的构造方法存在的时候，默认情况下是覆盖的过程，后面的构造方法会覆盖前面的构造方法
    如果非要赋值给另外一个构造方法的话，可以使用type的参数来进行指定
    
    <bean id="person4" class="com.example.study.Spring.IOC.day3.bean.Person">
        <constructor-arg  value="4"></constructor-arg>
        <constructor-arg  value="wangwu" ></constructor-arg>
        <constructor-arg  value="22" type="java.lang.Integer"></constructor-arg>
    </bean>
    
    总结：
         在日常工作中，一般都是用name,value的方式，很少有人去使用index或者type的方式，但是要注意各种情况出现的问题
    

    
    使用p命名空间来给属性赋值
    
    <bean id="person5" class="com.example.study.Spring.IOC.day3.bean.Person" p:id="5" p:name="wangwu" p:age="25" p:gender="女">
    </bean>

    给复杂类型进行赋值操作
    <bean id="person6" class="com.example.study.Spring.IOC.day3.bean.Person">
        <property name="id" value="6"></property>
        <property name="name" value="zhangsan6"></property>
        <property name="age" value="26"></property>
        <property name="gender" value="男6"></property>
        给数组赋值,使用array标签
        <property name="hobbies" value="book,girl,movie"></property>
        <property name="hobbies">
            <array>
                <value>book</value>
                <value>girl</value>
                <value>movie</value>
            </array>
        </property>
        给引用类型赋值,可以使用ref引入外部bean
        <property name="address" ref="address"></property>
        给list赋值
        <property name="lists" value="1,2,3"></property>
        <property name="lists">
            <list>
                使用内部bean,无法从IOC容器中直接获取对象的值
                <bean id="address2" class="com.example.study.Spring.IOC.day3.bean.Address">
                    <property name="province" value="北京"></property>
                </bean>
                <bean class="com.example.study.Spring.IOC.day3.bean.Address">
                    <property name="province" value="上海"></property>
                </bean>
                使用外部bean，可以随意从IOC容器获取对象的值
                <ref bean="address"></ref>
            </list>
        </property>
            给set属性赋值
        <property name="sets">
            <set>
                <value>zhangsan</value>
                <value>zhangsan</value>
                <value>lisi</value>
            </set>
        </property>
        给map赋值
        <property name="maps">
            <map>
                <entry key="a" value="aaa"></entry>
                <entry key="address" value-ref="address"></entry>
                <entry key="address2">
                    <bean class="com.example.study.Spring.IOC.day3.bean.Address">
                        <property name="province" value="广东省"></property>
                    </bean>
                </entry>
                <entry>
                    <key>
                        <value>heihei</value>
                    </key>
                    <value>haha</value>
                </entry>
                <entry key="list">
                    <list>
                        <value>11</value>
                        <value>22</value>
                    </list>
                </entry>
            </map>
        </property>
        给properties赋值
        <property name="properties">
            <props>
                <prop key="111">aaa</prop>
                <prop key="222">bbb</prop>
            </props>
        </property>
    </bean>
    <bean id="address" class="com.example.study.Spring.IOC.day3.bean.Address">
        <property name="province" value="河北省"></property>
        <property name="city" value="邯郸"></property>
        <property name="town" value="武安"></property>
    </bean>

    bean之间的继承关系
    可以使用abstract标签定义抽象bean，无法进行实例化
    <bean id="parent" class="com.example.study.Spring.IOC.day3.bean.Person" abstract="false">
        <property name="id" value="1"></property>
        <property name="name" value="zhangsan"></property>
        <property name="age" value="20"></property>
        <property name="gender" value="男"></property>
    </bean>
    可以通过parent属性来获取父bean中的某些属性值
    <bean id="son" class="com.example.study.Spring.IOC.day3.bean.Person" parent="parent">
        <property name="name" value="haha"></property>
    </bean>-->

    <!--创建bean的时候依赖关系
    当bean对象被创建的时候，是按照xml配置文件定义的顺序创建的，谁在前，谁就先被创建
        如果需要干扰创建的顺序，可以使用depends-on属性
    一般在实际工作中不必在意bean创建的顺序，无论谁先创建，需要依赖的对象在创建完成之后都会进行赋值操作
    -->
<!--    <bean id="address" class="com.example.study.Spring.IOC.day3.bean.Address" depends-on="person"></bean>-->
<!--    <bean id="person" class="com.example.study.Spring.IOC.day3.bean.Person"></bean>-->

    <!--设置bean对象的作用域
    通过scope属性可以指定当前bean的作用域
    singleton：单例模式，从IOC容器中获取的都是同一个对象，默认的作用域
    prototype：多例模式，从IOC容器中获取的对象每次都是新创建

    在spring4.x的版本中还包含另外两种作用域：
    request：每次发送请求都会有一个新的对象
    session：每一次会话都会有一个新的对象
            几乎不用，从来没用过，因此在5版本的时候被淘汰了
    注意：
        如果是singleton作用域的话，每次在创建IOC容器完成之前此对象已经创建完成
        如果是prototypez作用域的话，每次是在需要用到此对象的时候才会创建
    -->
<!--
    <bean id="person2" class="com.example.study.Spring.IOC.day3.bean.Person" scope="singleton"></bean>
-->

    <!--利用工厂方法创建bean-->
    <!--静态工厂：类名.静态方法（）-->
<!--
    <bean id="person" class="com.example.study.Spring.IOC.day3.factory.PersonStaticFactory" factory-method="getInstance">
        <constructor-arg value="zhangsan"></constructor-arg>
    </bean>
-->
    <!--实例工厂：先创建工厂实例，然后调用工厂实例的方法
        factory-bean:表示具体工厂类的实例
        factory-method:表示具体工厂实例的方法
    -->
<!--
    <bean id="instanceFactory" class="com.example.study.Spring.IOC.day3.factory.PersonInstanceFactory"></bean>
    <bean id="person2" class="com.example.study.Spring.IOC.day3.bean.Person" factory-bean="instanceFactory" factory-method="getInstance">
        <constructor-arg value="lisi"></constructor-arg>
    </bean>

    <bean id="myFactoryBean" class="com.example.study.Spring.IOC.day3.factory.MyFactoryBean"></bean>
-->

    <!--spring容器在创建对象的时候可以指定具体的初始化和销毁方法
    init-method:在对象创建完成之后会调用初始化方法
    destory-method:在容器关闭的时候会调用销毁方法
    -->

    <!--初始化和销毁的方法跟scope属性也是相关联的
    如果是singleton的话，初始化和销毁的方法都存在
    如果是prototype的话，初始化方法会调用，但是销毁的方法不会调用
    -->
<!--
    <bean id="person" class="com.example.study.Spring.IOC.day3.bean.Person"
          init-method="init"
          destroy-method="destory"
          scope="prototype">
    </bean>
    <bean id="myBeanPostProcessor"
          class="com.example.study.Spring.IOC.day3.bean.MyBeanPostProcessor"></bean>
-->
<!--    <bean id="address" class="com.example.study.Spring.IOC.day3.bean.Address"></bean>-->

<!--    spring管理第三方bean-->
<!--    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">-->
<!--        <property name="username" value="root"></property>-->
<!--        <property name="password" value="123456"></property>-->
<!--        <property name="url" value="jdbc:mysql://localhost:3306/demo"></property>-->
<!--        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>-->
<!--    </bean>-->

<!--    &lt;!&ndash;当需要引入外部的配置文件的时候，需要导入一些context的命名空间&ndash;&gt;-->
<!--    <context:property-placeholder location="classpath:com/example/study/Spring/IOC/day3/db.properties"></context:property-placeholder>-->
<!--    &lt;!&ndash;在配置文件编写属性的时候需要注意，-->
<!--    spring容器在进行启动的时候，会读取当前系统的某些环境变量的配置，-->
<!--    当前系统的用户名是用username来表示的，所以最好的方式是添加前缀来做区分-->
<!--    &ndash;&gt;-->
<!--    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource">-->
<!--        <property name="username" value="${jdbc.username}"></property>-->
<!--        <property name="password" value="${jdbc.password}"></property>-->
<!--        <property name="url" value="${url}"></property>-->
<!--        <property name="driverClassName" value="${driverClassName}"></property>-->
<!--    </bean>-->

<!--    <bean id="person2" class="com.example.study.Spring.IOC.day3.bean.Person">-->
<!--    <property name="name" value="${jdbc.username}"></property>-->
<!--</bean>-->

    <!--spring中的自动装配-->
    <bean id="address" class="com.example.study.Spring.IOC.day3.bean.Address">
        <property name="province" value="河北"></property>
        <property name="city" value="邯郸"></property>
        <property name="town" value="武安"></property>
    </bean>
<!--    <bean id="address2" class="com.example.study.Spring.IOC.day3.bean.Address">-->
<!--        <property name="province" value="河北2"></property>-->
<!--        <property name="city" value="邯郸2"></property>-->
<!--        <property name="town" value="武安2"></property>-->
<!--    </bean>-->
    <!--在spring中，可以使用自动装配的功能，spring会把某些bean注入到另外bean中
    可以使用autowire属性来实现自动装配，有以下几种情况
    default/no: 不装配
    byName:按照id来进行装配,根据set方法后面的名称首字母小写决定的，不是参数列表的名称
    byType:按照bean的类型来进行装配，但是如果有多个类型，就会报错，不知道选择哪一个具体的类型
    constructor:按照构造器进行装配，首先按照类型进行判断，如果有多个类型相同的bean,再按照id去进行判断
    -->
    <!--???为什么使用bytype的时候会加载环境变量出来-->
<!--    <bean id="person" class="com.example.study.Spring.IOC.day3.bean.Person" autowire="byType">-->
<!--    </bean>-->

    <!--SpEL表达式语言的使用-->
    <!--<bean id="person2" class="com.example.study.Spring.IOC.day3.bean.Person">
        &lt;!&ndash;可以引入bean对象的属性&ndash;&gt;
        <property name="name" value="#{address.province}"></property>
        &lt;!&ndash;可以支持运算符的所有操作&ndash;&gt;
        <property name="age" value="#{12*2}"></property>
        &lt;!&ndash;可以引入外部bean&ndash;&gt;
        <property name="address" value="#{address}"></property>
        &lt;!&ndash;可以调用静态方法&ndash;&gt;
        <property name="gender" value="#{T(java.util.UUID).randomUUID().toString().substring(0,5)}"></property>
        &lt;!&ndash;调用非静态方法&ndash;&gt;
        <property name="hobbies" value="#{address.getCity()}"></property>
    </bean>-->

</beans>

